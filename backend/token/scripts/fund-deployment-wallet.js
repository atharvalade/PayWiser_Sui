#!/usr/bin/env node

/**
 * Transfer SUI from Wallet A to the deployment wallet
 */

const { SuiClient, getFullnodeUrl } = require('@mysten/sui/client');
const { Ed25519Keypair } = require('@mysten/sui/keypairs/ed25519');
const { Transaction } = require('@mysten/sui/transactions');
const { fromB64 } = require('@mysten/sui/utils');

// Wallet A (Gas Sponsor) details
const WALLET_A = {
    name: 'Wallet A (Gas Sponsor)',
    address: '0xcb3fced2337776c984f220f27e97428f426f80e5b771a3e467b2d6f14597929c',
    privateKey: '3GInch4KuXu922aU4qCs9PmXgE59c/4S73OtzDStYVM='
};

// Deployment wallet (generated by Sui CLI)
const DEPLOYMENT_WALLET = '0xf5276e5ce4bfb797ced9e7e9528d5b82a445b097fe503490bbae1b82fb42bb1a';

async function transferSUIToDeploymentWallet() {
    console.log('üí∏ Transferring SUI from Wallet A to deployment wallet...\n');

    const client = new SuiClient({ url: getFullnodeUrl('testnet') });

    try {
        // Check initial balances
        console.log('üìä Initial balances:');
        
        const walletABalance = await client.getBalance({
            owner: WALLET_A.address,
            coinType: '0x2::sui::SUI'
        });
        console.log(`   Wallet A: ${(parseInt(walletABalance.totalBalance) / 1e9).toFixed(9)} SUI`);

        const deploymentBalance = await client.getBalance({
            owner: DEPLOYMENT_WALLET,
            coinType: '0x2::sui::SUI'
        });
        console.log(`   Deployment Wallet: ${(parseInt(deploymentBalance.totalBalance) / 1e9).toFixed(9)} SUI`);

        if (parseInt(walletABalance.totalBalance) < 200000000) { // Less than 0.2 SUI
            throw new Error('Wallet A has insufficient balance for transfer');
        }

        // Create keypair for Wallet A
        const walletAKeypair = Ed25519Keypair.fromSecretKey(fromB64(WALLET_A.privateKey));
        
        // Verify address matches
        const derivedAddress = walletAKeypair.getPublicKey().toSuiAddress();
        if (derivedAddress !== WALLET_A.address) {
            throw new Error(`Address mismatch for Wallet A: expected ${WALLET_A.address}, got ${derivedAddress}`);
        }
        console.log('‚úÖ Wallet A private key verification successful');

        // Get SUI coins from Wallet A
        const coins = await client.getCoins({
            owner: WALLET_A.address,
            coinType: '0x2::sui::SUI'
        });

        if (coins.data.length === 0) {
            throw new Error('No SUI coins found in Wallet A');
        }

        console.log(`üì¶ Found ${coins.data.length} SUI coin(s) in Wallet A`);

        // Create transaction to send 0.1 SUI to deployment wallet (keeping some for gas)
        const txb = new Transaction();
        txb.setSender(WALLET_A.address);
        
        // Transfer 0.1 SUI (100,000,000 MIST) - enough for deployment
        const [transferCoin] = txb.splitCoins(
            txb.gas,
            [100000000] // 0.1 SUI
        );

        // Transfer to deployment wallet
        txb.transferObjects([transferCoin], DEPLOYMENT_WALLET);

        console.log('üìù Building transfer transaction...');
        console.log(`üí∞ Transferring 0.1 SUI to: ${DEPLOYMENT_WALLET}`);
        
        // Build and sign transaction
        const txBytes = await txb.build({ client });
        const signature = await walletAKeypair.signTransaction(txBytes);

        console.log('üöÄ Executing transfer...');
        
        // Execute transaction
        const result = await client.executeTransactionBlock({
            transactionBlock: txBytes,
            signature: signature.signature,
            options: {
                showEffects: true,
                showBalanceChanges: true
            }
        });

        console.log(`‚úÖ Transfer completed! Transaction: ${result.digest}`);
        console.log(`üìä Status: ${result.effects?.status?.status}`);
        console.log(`‚õΩ Gas Used: ${result.effects?.gasUsed?.computationCost} computation, ${result.effects?.gasUsed?.storageCost} storage`);

        // Check final balances
        console.log('\nüìä Final balances:');
        
        const finalWalletABalance = await client.getBalance({
            owner: WALLET_A.address,
            coinType: '0x2::sui::SUI'
        });
        console.log(`   Wallet A: ${(parseInt(finalWalletABalance.totalBalance) / 1e9).toFixed(9)} SUI`);

        const finalDeploymentBalance = await client.getBalance({
            owner: DEPLOYMENT_WALLET,
            coinType: '0x2::sui::SUI'
        });
        console.log(`   Deployment Wallet: ${(parseInt(finalDeploymentBalance.totalBalance) / 1e9).toFixed(9)} SUI`);

        console.log('\nüéâ Transfer successful! Deployment wallet is now funded.');
        console.log('üìã Next step: Run deployment script');
        
        return {
            transactionDigest: result.digest,
            status: result.effects?.status?.status,
            deploymentWallet: DEPLOYMENT_WALLET,
            finalBalance: (parseInt(finalDeploymentBalance.totalBalance) / 1e9).toFixed(9)
        };

    } catch (error) {
        console.error('\n‚ùå Transfer failed:', error.message);
        throw error;
    }
}

// Run the transfer
transferSUIToDeploymentWallet()
    .then((result) => {
        console.log('\n‚úÖ Funding complete!');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå Funding failed:', error.message);
        process.exit(1);
    });
